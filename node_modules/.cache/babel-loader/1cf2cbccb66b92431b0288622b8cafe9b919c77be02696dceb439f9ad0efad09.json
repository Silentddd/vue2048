{"ast":null,"code":"import _slicedToArray from \"D:/\\u5B89\\u4E43\\u8FBE\\u516C\\u53F8\\u4E1A\\u52A1\\u8D44\\u6599/vue2048/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.fill.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.reverse.js\";\nimport \"core-js/modules/es.array.splice.js\";\nimport \"core-js/modules/es.date.to-json.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport \"core-js/modules/es.json.stringify.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.set.js\";\nimport \"core-js/modules/es.set.difference.v2.js\";\nimport \"core-js/modules/es.set.intersection.v2.js\";\nimport \"core-js/modules/es.set.is-disjoint-from.v2.js\";\nimport \"core-js/modules/es.set.is-subset-of.v2.js\";\nimport \"core-js/modules/es.set.is-superset-of.v2.js\";\nimport \"core-js/modules/es.set.symmetric-difference.v2.js\";\nimport \"core-js/modules/es.set.union.v2.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/web.timers.js\";\nexport default {\n  name: 'Game2048',\n  data: function data() {\n    return {\n      board: [],\n      score: 0,\n      newTiles: new Set(),\n      touchStartX: 0,\n      touchStartY: 0\n    };\n  },\n  created: function created() {\n    this.newGame();\n  },\n  mounted: function mounted() {\n    window.addEventListener('keydown', this.handleKeydown);\n  },\n  beforeDestroy: function beforeDestroy() {\n    window.removeEventListener('keydown', this.handleKeydown);\n  },\n  methods: {\n    newGame: function newGame() {\n      this.board = Array(4).fill().map(function () {\n        return Array(4).fill(0);\n      });\n      this.score = 0;\n      this.newTiles.clear();\n      this.addNewTile();\n      this.addNewTile();\n    },\n    addNewTile: function addNewTile() {\n      var _this = this;\n      var emptyCells = [];\n      for (var i = 0; i < 4; i++) {\n        for (var j = 0; j < 4; j++) {\n          if (this.board[i][j] === 0) {\n            emptyCells.push([i, j]);\n          }\n        }\n      }\n      if (emptyCells.length > 0) {\n        var _emptyCells$Math$floo = _slicedToArray(emptyCells[Math.floor(Math.random() * emptyCells.length)], 2),\n          row = _emptyCells$Math$floo[0],\n          col = _emptyCells$Math$floo[1];\n        this.board[row][col] = Math.random() < 0.9 ? 2 : 4;\n        this.newTiles.add(\"\".concat(row, \"-\").concat(col));\n        setTimeout(function () {\n          _this.newTiles[\"delete\"](\"\".concat(row, \"-\").concat(col));\n        }, 300);\n      }\n    },\n    isNew: function isNew(row, col) {\n      return this.newTiles.has(\"\".concat(row, \"-\").concat(col));\n    },\n    move: function move(direction) {\n      var _this2 = this;\n      var originalBoard = JSON.stringify(this.board);\n      var moved = false;\n\n      // 移动和合并逻辑\n      var moveLeft = function moveLeft() {\n        for (var i = 0; i < 4; i++) {\n          var row = _this2.board[i].filter(function (cell) {\n            return cell !== 0;\n          });\n          for (var j = 0; j < row.length - 1; j++) {\n            if (row[j] === row[j + 1]) {\n              row[j] *= 2;\n              _this2.score += row[j];\n              row.splice(j + 1, 1);\n            }\n          }\n          while (row.length < 4) row.push(0);\n          _this2.board[i] = row;\n        }\n      };\n      var rotate = function rotate() {\n        var newBoard = Array(4).fill().map(function () {\n          return Array(4).fill(0);\n        });\n        for (var i = 0; i < 4; i++) {\n          for (var j = 0; j < 4; j++) {\n            newBoard[i][j] = _this2.board[j][3 - i];\n          }\n        }\n        _this2.board = newBoard;\n      };\n\n      // 根据方向执行移动\n      switch (direction) {\n        case 'left':\n          moveLeft();\n          break;\n        case 'right':\n          this.board.forEach(function (row) {\n            return row.reverse();\n          });\n          moveLeft();\n          this.board.forEach(function (row) {\n            return row.reverse();\n          });\n          break;\n        case 'up':\n          rotate();\n          moveLeft();\n          rotate();\n          rotate();\n          rotate();\n          break;\n        case 'down':\n          rotate();\n          rotate();\n          rotate();\n          moveLeft();\n          rotate();\n          break;\n      }\n\n      // 检查是否有移动\n      moved = originalBoard !== JSON.stringify(this.board);\n      if (moved) {\n        this.addNewTile();\n      }\n\n      // 检查游戏是否结束\n      if (this.isGameOver()) {\n        this.$message.error('游戏结束！');\n      }\n    },\n    isGameOver: function isGameOver() {\n      // 检查是否有空格\n      for (var i = 0; i < 4; i++) {\n        for (var j = 0; j < 4; j++) {\n          if (this.board[i][j] === 0) return false;\n        }\n      }\n\n      // 检查是否可以合并\n      for (var _i = 0; _i < 4; _i++) {\n        for (var _j = 0; _j < 3; _j++) {\n          if (this.board[_i][_j] === this.board[_i][_j + 1]) return false;\n          if (this.board[_j][_i] === this.board[_j + 1][_i]) return false;\n        }\n      }\n      return true;\n    },\n    handleKeydown: function handleKeydown(e) {\n      var keyMap = {\n        'ArrowLeft': 'left',\n        'ArrowRight': 'right',\n        'ArrowUp': 'up',\n        'ArrowDown': 'down'\n      };\n      if (keyMap[e.key]) {\n        this.move(keyMap[e.key]);\n      }\n    },\n    handleTouchStart: function handleTouchStart(e) {\n      this.touchStartX = e.touches[0].clientX;\n      this.touchStartY = e.touches[0].clientY;\n    },\n    handleTouchMove: function handleTouchMove(e) {\n      e.preventDefault();\n    },\n    handleTouchEnd: function handleTouchEnd(e) {\n      var touchEndX = e.changedTouches[0].clientX;\n      var touchEndY = e.changedTouches[0].clientY;\n      var dx = touchEndX - this.touchStartX;\n      var dy = touchEndY - this.touchStartY;\n      if (Math.abs(dx) > Math.abs(dy)) {\n        if (Math.abs(dx) > 50) {\n          this.move(dx > 0 ? 'right' : 'left');\n        }\n      } else {\n        if (Math.abs(dy) > 50) {\n          this.move(dy > 0 ? 'down' : 'up');\n        }\n      }\n    }\n  }\n};","map":{"version":3,"names":["name","data","board","score","newTiles","Set","touchStartX","touchStartY","created","newGame","mounted","window","addEventListener","handleKeydown","beforeDestroy","removeEventListener","methods","Array","fill","map","clear","addNewTile","_this","emptyCells","i","j","push","length","_emptyCells$Math$floo","_slicedToArray","Math","floor","random","row","col","add","concat","setTimeout","isNew","has","move","direction","_this2","originalBoard","JSON","stringify","moved","moveLeft","filter","cell","splice","rotate","newBoard","forEach","reverse","isGameOver","$message","error","e","keyMap","key","handleTouchStart","touches","clientX","clientY","handleTouchMove","preventDefault","handleTouchEnd","touchEndX","changedTouches","touchEndY","dx","dy","abs"],"sources":["src/components/Game2048.vue"],"sourcesContent":["<template>\r\n  <div class=\"game-container\">\r\n    <el-card class=\"game-card\">\r\n      <div class=\"header\">\r\n        <div class=\"score-container\">\r\n          <div class=\"score-label\">得分</div>\r\n          <div class=\"score\">{{ score }}</div>\r\n        </div>\r\n        <el-button type=\"primary\" @click=\"newGame\">新游戏</el-button>\r\n      </div>\r\n      <div class=\"game-grid\" \r\n           @touchstart=\"handleTouchStart\"\r\n           @touchmove=\"handleTouchMove\"\r\n           @touchend=\"handleTouchEnd\"\r\n           tabindex=\"0\"\r\n           @keydown.prevent=\"handleKeydown\">\r\n        <div class=\"grid-row\" v-for=\"(row, rowIndex) in board\" :key=\"rowIndex\">\r\n          <div class=\"grid-cell\" \r\n               v-for=\"(cell, colIndex) in row\" \r\n               :key=\"colIndex\"\r\n               :class=\"['tile-' + cell, { 'tile-new': isNew(rowIndex, colIndex) }]\">\r\n            {{ cell || '' }}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </el-card>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: 'Game2048',\r\n  data() {\r\n    return {\r\n      board: [],\r\n      score: 0,\r\n      newTiles: new Set(),\r\n      touchStartX: 0,\r\n      touchStartY: 0\r\n    }\r\n  },\r\n  created() {\r\n    this.newGame()\r\n  },\r\n  mounted() {\r\n    window.addEventListener('keydown', this.handleKeydown)\r\n  },\r\n  beforeDestroy() {\r\n    window.removeEventListener('keydown', this.handleKeydown)\r\n  },\r\n  methods: {\r\n    newGame() {\r\n      this.board = Array(4).fill().map(() => Array(4).fill(0))\r\n      this.score = 0\r\n      this.newTiles.clear()\r\n      this.addNewTile()\r\n      this.addNewTile()\r\n    },\r\n    addNewTile() {\r\n      const emptyCells = []\r\n      for (let i = 0; i < 4; i++) {\r\n        for (let j = 0; j < 4; j++) {\r\n          if (this.board[i][j] === 0) {\r\n            emptyCells.push([i, j])\r\n          }\r\n        }\r\n      }\r\n      if (emptyCells.length > 0) {\r\n        const [row, col] = emptyCells[Math.floor(Math.random() * emptyCells.length)]\r\n        this.board[row][col] = Math.random() < 0.9 ? 2 : 4\r\n        this.newTiles.add(`${row}-${col}`)\r\n        setTimeout(() => {\r\n          this.newTiles.delete(`${row}-${col}`)\r\n        }, 300)\r\n      }\r\n    },\r\n    isNew(row, col) {\r\n      return this.newTiles.has(`${row}-${col}`)\r\n    },\r\n    move(direction) {\r\n      const originalBoard = JSON.stringify(this.board)\r\n      let moved = false\r\n\r\n      // 移动和合并逻辑\r\n      const moveLeft = () => {\r\n        for (let i = 0; i < 4; i++) {\r\n          let row = this.board[i].filter(cell => cell !== 0)\r\n          for (let j = 0; j < row.length - 1; j++) {\r\n            if (row[j] === row[j + 1]) {\r\n              row[j] *= 2\r\n              this.score += row[j]\r\n              row.splice(j + 1, 1)\r\n            }\r\n          }\r\n          while (row.length < 4) row.push(0)\r\n          this.board[i] = row\r\n        }\r\n      }\r\n\r\n      const rotate = () => {\r\n        const newBoard = Array(4).fill().map(() => Array(4).fill(0))\r\n        for (let i = 0; i < 4; i++) {\r\n          for (let j = 0; j < 4; j++) {\r\n            newBoard[i][j] = this.board[j][3 - i]\r\n          }\r\n        }\r\n        this.board = newBoard\r\n      }\r\n\r\n      // 根据方向执行移动\r\n      switch (direction) {\r\n        case 'left':\r\n          moveLeft()\r\n          break\r\n        case 'right':\r\n          this.board.forEach(row => row.reverse())\r\n          moveLeft()\r\n          this.board.forEach(row => row.reverse())\r\n          break\r\n        case 'up':\r\n          rotate()\r\n          moveLeft()\r\n          rotate()\r\n          rotate()\r\n          rotate()\r\n          break\r\n        case 'down':\r\n          rotate()\r\n          rotate()\r\n          rotate()\r\n          moveLeft()\r\n          rotate()\r\n          break\r\n      }\r\n\r\n      // 检查是否有移动\r\n      moved = originalBoard !== JSON.stringify(this.board)\r\n      if (moved) {\r\n        this.addNewTile()\r\n      }\r\n\r\n      // 检查游戏是否结束\r\n      if (this.isGameOver()) {\r\n        this.$message.error('游戏结束！')\r\n      }\r\n    },\r\n    isGameOver() {\r\n      // 检查是否有空格\r\n      for (let i = 0; i < 4; i++) {\r\n        for (let j = 0; j < 4; j++) {\r\n          if (this.board[i][j] === 0) return false\r\n        }\r\n      }\r\n\r\n      // 检查是否可以合并\r\n      for (let i = 0; i < 4; i++) {\r\n        for (let j = 0; j < 3; j++) {\r\n          if (this.board[i][j] === this.board[i][j + 1]) return false\r\n          if (this.board[j][i] === this.board[j + 1][i]) return false\r\n        }\r\n      }\r\n\r\n      return true\r\n    },\r\n    handleKeydown(e) {\r\n      const keyMap = {\r\n        'ArrowLeft': 'left',\r\n        'ArrowRight': 'right',\r\n        'ArrowUp': 'up',\r\n        'ArrowDown': 'down'\r\n      }\r\n      if (keyMap[e.key]) {\r\n        this.move(keyMap[e.key])\r\n      }\r\n    },\r\n    handleTouchStart(e) {\r\n      this.touchStartX = e.touches[0].clientX\r\n      this.touchStartY = e.touches[0].clientY\r\n    },\r\n    handleTouchMove(e) {\r\n      e.preventDefault()\r\n    },\r\n    handleTouchEnd(e) {\r\n      const touchEndX = e.changedTouches[0].clientX\r\n      const touchEndY = e.changedTouches[0].clientY\r\n      const dx = touchEndX - this.touchStartX\r\n      const dy = touchEndY - this.touchStartY\r\n      \r\n      if (Math.abs(dx) > Math.abs(dy)) {\r\n        if (Math.abs(dx) > 50) {\r\n          this.move(dx > 0 ? 'right' : 'left')\r\n        }\r\n      } else {\r\n        if (Math.abs(dy) > 50) {\r\n          this.move(dy > 0 ? 'down' : 'up')\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.game-container {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  min-height: 100vh;\r\n  padding: 20px;\r\n  box-sizing: border-box;\r\n}\r\n\r\n.game-card {\r\n  width: 500px;\r\n  background-color: #bbada0 !important;\r\n  border-radius: 6px;\r\n  padding: 15px;\r\n}\r\n\r\n.header {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.score-container {\r\n  background: #8f7a66;\r\n  padding: 15px 25px;\r\n  border-radius: 6px;\r\n  color: white;\r\n  text-align: center;\r\n}\r\n\r\n.score-label {\r\n  font-size: 13px;\r\n  color: #eee4da;\r\n}\r\n\r\n.score {\r\n  font-size: 25px;\r\n  font-weight: bold;\r\n}\r\n\r\n.game-grid {\r\n  display: grid;\r\n  grid-template-rows: repeat(4, 1fr);\r\n  gap: 15px;\r\n  background-color: #bbada0;\r\n  border-radius: 6px;\r\n  padding: 15px;\r\n  margin: 0 auto;\r\n}\r\n\r\n.grid-row {\r\n  display: grid;\r\n  grid-template-columns: repeat(4, 1fr);\r\n  gap: 15px;\r\n}\r\n\r\n.grid-cell {\r\n  width: 100px;\r\n  height: 100px;\r\n  background-color: rgba(238, 228, 218, 0.35);\r\n  border-radius: 3px;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  font-size: 55px;\r\n  font-weight: bold;\r\n  color: #776e65;\r\n  transition: all 0.15s ease;\r\n}\r\n\r\n.tile-2 { background-color: #eee4da; }\r\n.tile-4 { background-color: #ede0c8; }\r\n.tile-8 { background-color: #f2b179; color: #f9f6f2; }\r\n.tile-16 { background-color: #f59563; color: #f9f6f2; }\r\n.tile-32 { background-color: #f67c5f; color: #f9f6f2; }\r\n.tile-64 { background-color: #f65e3b; color: #f9f6f2; }\r\n.tile-128 { \r\n  background-color: #edcf72; \r\n  color: #f9f6f2;\r\n  font-size: 45px;\r\n}\r\n.tile-256 { \r\n  background-color: #edcc61; \r\n  color: #f9f6f2;\r\n  font-size: 45px;\r\n}\r\n.tile-512 { \r\n  background-color: #edc850; \r\n  color: #f9f6f2;\r\n  font-size: 45px;\r\n}\r\n.tile-1024 { \r\n  background-color: #edc53f; \r\n  color: #f9f6f2;\r\n  font-size: 35px;\r\n}\r\n.tile-2048 { \r\n  background-color: #edc22e; \r\n  color: #f9f6f2;\r\n  font-size: 35px;\r\n}\r\n\r\n.tile-new {\r\n  animation: appear 0.3s ease-in-out;\r\n}\r\n\r\n@keyframes appear {\r\n  0% {\r\n    opacity: 0;\r\n    transform: scale(0);\r\n  }\r\n  100% {\r\n    opacity: 1;\r\n    transform: scale(1);\r\n  }\r\n}\r\n\r\n/* 响应式设计 */\r\n@media screen and (max-width: 520px) {\r\n  .game-card {\r\n    width: 100%;\r\n    margin: 0 10px;\r\n  }\r\n\r\n  .grid-cell {\r\n    width: auto;\r\n    height: auto;\r\n    aspect-ratio: 1;\r\n    font-size: 35px;\r\n  }\r\n\r\n  .tile-128,\r\n  .tile-256,\r\n  .tile-512 {\r\n    font-size: 30px;\r\n  }\r\n\r\n  .tile-1024,\r\n  .tile-2048 {\r\n    font-size: 25px;\r\n  }\r\n}\r\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}